buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'net.minecraftforge:GradleUtils:1.+'
    }
}

plugins {
  id 'org.cadixdev.licenser' version '0.6.1'
  id 'maven-publish'
  id 'java'
  id 'eclipse'
  id 'idea'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'net.minecraftforge.gradleutils'

repositories {
    mavenCentral()
}

ext {
    GIT_REPO = 'LexManos/CobbleForDays'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18-38.0.17'
}

sourceSets {
    main {
        resources {
            srcDirs += ['src/generated/resources']
        }
    }
}

minecraft {
    mappings channel: 'official', version: '1.18'
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                cobblefordays {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                cobblefordays {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'cobblefordays', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                cobblefordays {
                    source sourceSets.main
                }
            }
        }
    }
}

group = 'net.minecraftforge.lex'
version = gradleutils.getTagOffsetBranchVersion()
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

license {
  header project.file('LICENSE-header.txt')
  newLine false
}

ext {
    changelog = rootProject.file('build/changelog.txt')
    MANIFEST = manifest{
        attributes([
            'Specification-Title':      project.name,
            'Specification-Vendor':     'Forge Development LLC',
            'Specification-Version':    project.version,
            'Implementation-Title':     project.name,
            'Implementation-Version':   project.version,
            'Implementation-Vendor':    'Forge Development LLC'
        ] as LinkedHashMap)
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

//TODO: Temp Until we expose something sane in FG
task extractRange(type: net.minecraftforge.gradle.common.tasks.ExtractRangeMap, dependsOn: classes) {
    sources.from sourceSets.main.java.srcDirs
    dependencies.from compileJava.classpath
}

task applyRange(type: net.minecraftforge.gradle.common.tasks.ApplyRangeMap, dependsOn: [extractRange, createMcpToSrg]) {
    rangeMap.set extractRange.output
    srgFiles.from createMcpToSrg.output
    sources.from sourceSets.main.java.srcDirs
}

task sourcesJar(type: Jar, dependsOn: applyRange) {
    classifier = 'sources'
    from zipTree(applyRange.output)
    manifest.from(MANIFEST)
}

// This is the preferred method to reobfusicate your jar file
jar.finalizedBy('reobfJar') 
//However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfusication until publishing by doing
//publish.dependsOn('reobfJar')

artifacts {
    archives jar
    archives sourcesJar
    if (changelog.exists())
        archives changelog
}

jar {
    manifest.from(MANIFEST)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            if (changelog.exists()) {
                artifact(changelog){
                    classifier 'changelog'
                }
            }
            pom {
                name = project.archivesBaseName
                packaging = 'jar'
                url = "https://github.com/${GIT_REPO}"

                scm {
                    url = "https://github.com/${GIT_REPO}"
                    connection = "scm:git:git://github.com/${GIT_REPO}.git"
                    developerConnection = "scm:git:git@github.com:${GIT_REPO}.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/${GIT_REPO}/issues"
                }

                developers {
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}
